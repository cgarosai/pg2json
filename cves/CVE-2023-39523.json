{
    "id": 221842,
    "name": "CVE-2023-39523",
    "cwe": "CWE-77",
    "modified": "2023-08-11T16:12:57",
    "published": "2023-08-07T19:15:09",
    "status": "Analyzed",
    "summary": "ScanCode.io is a server to script and automate software composition analysis with ScanPipe pipelines. Prior to version 32.5.1, the software has a possible command injection vulnerability in the docker fetch process as it allows to append malicious commands in the `docker_reference` parameter.\n\nIn the function `scanpipe/pipes/fetch.py:fetch_docker_image` the parameter `docker_reference` is user controllable. The `docker_reference` variable is then passed to the vulnerable function `get_docker_image_platform`.  However, the `get_docker_image_plaform` function constructs a shell command with the passed `docker_reference`. The `pipes.run_command` then executes the shell command without any prior sanitization, making the function vulnerable to command injections. A malicious user who is able to create or add inputs to a project can inject commands. Although the command injections are blind and the user will not receive direct feedback without logs, it is still possible to cause damage to the server/container. The vulnerability appears for example if a malicious user adds a semicolon after the input of `docker://;`, it would allow appending malicious commands.\n\nVersion 32.5.1 contains a patch for this issue. The `docker_reference` input should be sanitized to avoid command injections and, as a workaround, one may avoid creating commands with user controlled input directly.",
    "cvss3": {
        "cvss": 8.8,
        "exploitability_score": 2.8,
        "impact_score": 5.9,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
    },
    "cvss2": null,
    "cpes": [
        {
            "id": 1139475
        },
        {
            "id": 1139476
        },
        {
            "id": 1139477
        },
        {
            "id": 1139478
        },
        {
            "id": 1139479
        },
        {
            "id": 1139480
        },
        {
            "id": 1139481
        },
        {
            "id": 1139482
        },
        {
            "id": 1139483
        },
        {
            "id": 1139484
        },
        {
            "id": 1139486
        },
        {
            "id": 1139487
        },
        {
            "id": 1139488
        },
        {
            "id": 1139489
        },
        {
            "id": 1139490
        },
        {
            "id": 1139491
        },
        {
            "id": 1139492
        },
        {
            "id": 1139493
        },
        {
            "id": 1139494
        },
        {
            "id": 1139495
        },
        {
            "id": 1139496
        },
        {
            "id": 1139497
        },
        {
            "id": 1139498
        },
        {
            "id": 1139499
        },
        {
            "id": 1139500
        },
        {
            "id": 1139501
        },
        {
            "id": 1139502
        },
        {
            "id": 1139503
        },
        {
            "id": 1139504
        }
    ]
}