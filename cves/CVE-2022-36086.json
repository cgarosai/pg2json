{
    "id": 194939,
    "name": "CVE-2022-36086",
    "cwe": "CWE-1284",
    "modified": "2023-07-21T17:23:18",
    "published": "2022-09-07T21:15:14",
    "status": "Analyzed",
    "summary": "linked_list_allocator is an allocator usable for no_std systems. Prior to version 0.10.2, the heap initialization methods were missing a minimum size check for the given heap size argument. This could lead to out-of-bound writes when a heap was initialized with a size smaller than `3 * size_of::<usize>` because of metadata write operations. This vulnerability impacts all the initialization functions on the `Heap` and `LockedHeap` types, including `Heap::new`, `Heap::init`, `Heap::init_from_slice`, and `LockedHeap::new`. It also affects multiple uses of the `Heap::extend` method. Version 0.10.2 contains a patch for the issue. As a workaround, ensure that the heap is only initialized with a size larger than `3 * size_of::<usize>` and that the `Heap::extend` method is only called with sizes larger than `2 * size_of::<usize>()`. Also, ensure that the total heap size is (and stays) a multiple of `2 * size_of::<usize>()`.",
    "cvss3": {
        "cvss": 9.8,
        "exploitability_score": 3.9,
        "impact_score": 5.9,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
    },
    "cvss2": null,
    "cpes": [
        {
            "id": 930576
        },
        {
            "id": 930577
        },
        {
            "id": 930578
        },
        {
            "id": 930579
        },
        {
            "id": 930580
        },
        {
            "id": 930581
        },
        {
            "id": 930582
        },
        {
            "id": 930583
        },
        {
            "id": 930584
        },
        {
            "id": 930585
        },
        {
            "id": 930586
        },
        {
            "id": 930587
        },
        {
            "id": 930588
        },
        {
            "id": 930589
        },
        {
            "id": 930590
        },
        {
            "id": 930591
        },
        {
            "id": 930592
        },
        {
            "id": 930593
        },
        {
            "id": 930594
        },
        {
            "id": 930595
        },
        {
            "id": 930596
        },
        {
            "id": 930597
        },
        {
            "id": 930598
        },
        {
            "id": 930599
        },
        {
            "id": 930600
        },
        {
            "id": 930601
        },
        {
            "id": 930602
        },
        {
            "id": 930603
        },
        {
            "id": 930604
        },
        {
            "id": 930605
        },
        {
            "id": 930606
        },
        {
            "id": 930607
        },
        {
            "id": 930608
        },
        {
            "id": 930609
        },
        {
            "id": 930610
        },
        {
            "id": 930611
        },
        {
            "id": 930612
        },
        {
            "id": 930613
        },
        {
            "id": 930614
        },
        {
            "id": 930615
        },
        {
            "id": 930616
        }
    ]
}