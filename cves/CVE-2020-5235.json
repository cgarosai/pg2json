{
    "id": 137976,
    "name": "CVE-2020-5235",
    "cwe": "CWE-125",
    "modified": "2020-02-06T17:51:56",
    "published": "2020-02-04T02:15:10",
    "status": "Analyzed",
    "summary": "There is a potentially exploitable out of memory condition In Nanopb before 0.4.1, 0.3.9.5, and 0.2.9.4. When nanopb is compiled with PB_ENABLE_MALLOC, the message to be decoded contains a repeated string, bytes or message field and realloc() runs out of memory when expanding the array nanopb can end up calling `free()` on a pointer value that comes from uninitialized memory. Depending on platform this can result in a crash or further memory corruption, which may be exploitable in some cases. This problem is fixed in nanopb-0.4.1, nanopb-0.3.9.5, nanopb-0.2.9.4.",
    "cvss3": {
        "cvss": 9.8,
        "exploitability_score": 3.9,
        "impact_score": 5.9,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
    },
    "cvss2": {
        "exploitability_score": 10.0,
        "impact_score": 6.4,
        "cvss": 7.5,
        "vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P"
    },
    "cpes": [
        {
            "id": 495262
        },
        {
            "id": 495263
        },
        {
            "id": 495264
        },
        {
            "id": 495265
        },
        {
            "id": 495266
        },
        {
            "id": 495267
        },
        {
            "id": 495268
        },
        {
            "id": 495269
        },
        {
            "id": 495270
        },
        {
            "id": 495271
        },
        {
            "id": 495272
        },
        {
            "id": 495273
        },
        {
            "id": 495274
        },
        {
            "id": 495275
        },
        {
            "id": 495276
        },
        {
            "id": 495277
        },
        {
            "id": 495278
        },
        {
            "id": 495279
        },
        {
            "id": 495280
        },
        {
            "id": 495281
        },
        {
            "id": 495282
        },
        {
            "id": 495283
        },
        {
            "id": 495284
        },
        {
            "id": 495285
        },
        {
            "id": 495286
        },
        {
            "id": 495288
        },
        {
            "id": 495289
        },
        {
            "id": 495290
        },
        {
            "id": 495291
        },
        {
            "id": 495292
        },
        {
            "id": 495293
        },
        {
            "id": 495294
        },
        {
            "id": 495295
        },
        {
            "id": 495296
        },
        {
            "id": 495297
        },
        {
            "id": 495298
        },
        {
            "id": 495299
        },
        {
            "id": 495300
        },
        {
            "id": 495301
        },
        {
            "id": 495303
        },
        {
            "id": 495304
        }
    ]
}