{
    "id": 258514,
    "name": "CVE-2024-42231",
    "cwe": "CWE-682",
    "modified": "2024-07-30T17:30:52",
    "published": "2024-07-30T06:15:08",
    "status": "Analyzed",
    "summary": "In the Linux kernel, the following vulnerability has been resolved:\n\nbtrfs: zoned: fix calc_available_free_space() for zoned mode\n\ncalc_available_free_space() returns the total size of metadata (or\nsystem) block groups, which can be allocated from unallocated disk\nspace. The logic is wrong on zoned mode in two places.\n\nFirst, the calculation of data_chunk_size is wrong. We always allocate\none zone as one chunk, and no partial allocation of a zone. So, we\nshould use zone_size (= data_sinfo->chunk_size) as it is.\n\nSecond, the result \"avail\" may not be zone aligned. Since we always\nallocate one zone as one chunk on zoned mode, returning non-zone size\naligned bytes will result in less pressure on the async metadata reclaim\nprocess.\n\nThis is serious for the nearly full state with a large zone size device.\nAllowing over-commit too much will result in less async reclaim work and\nend up in ENOSPC. We can align down to the zone size to avoid that.",
    "cvss3": {
        "cvss": 5.5,
        "exploitability_score": 1.8,
        "impact_score": 3.6,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
    },
    "cvss2": null,
    "cpes": [
        {
            "id": 1217932
        },
        {
            "id": 1217933
        },
        {
            "id": 1217934
        },
        {
            "id": 1217935
        },
        {
            "id": 1217937
        },
        {
            "id": 1248979
        },
        {
            "id": 1248980
        },
        {
            "id": 1248981
        },
        {
            "id": 1248982
        },
        {
            "id": 1248989
        },
        {
            "id": 1248990
        },
        {
            "id": 1262084
        },
        {
            "id": 1262085
        },
        {
            "id": 1262086
        },
        {
            "id": 1262087
        },
        {
            "id": 1262088
        },
        {
            "id": 1262089
        },
        {
            "id": 1262091
        },
        {
            "id": 1266367
        },
        {
            "id": 1266368
        },
        {
            "id": 1266369
        },
        {
            "id": 1266388
        },
        {
            "id": 1266389
        },
        {
            "id": 1266390
        },
        {
            "id": 1266391
        },
        {
            "id": 1266392
        },
        {
            "id": 1270629
        },
        {
            "id": 1270630
        },
        {
            "id": 1270631
        },
        {
            "id": 1270632
        }
    ]
}