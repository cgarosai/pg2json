{
    "id": 257338,
    "name": "CVE-2024-41010",
    "cwe": "CWE-416",
    "modified": "2024-07-19T13:24:59",
    "published": "2024-07-17T05:15:02",
    "status": "Analyzed",
    "summary": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: Fix too early release of tcx_entry\n\nPedro Pinto and later independently also Hyunwoo Kim and Wongi Lee reported\nan issue that the tcx_entry can be released too early leading to a use\nafter free (UAF) when an active old-style ingress or clsact qdisc with a\nshared tc block is later replaced by another ingress or clsact instance.\n\nEssentially, the sequence to trigger the UAF (one example) can be as follows:\n\n  1. A network namespace is created\n  2. An ingress qdisc is created. This allocates a tcx_entry, and\n     &tcx_entry->miniq is stored in the qdisc's miniqp->p_miniq. At the\n     same time, a tcf block with index 1 is created.\n  3. chain0 is attached to the tcf block. chain0 must be connected to\n     the block linked to the ingress qdisc to later reach the function\n     tcf_chain0_head_change_cb_del() which triggers the UAF.\n  4. Create and graft a clsact qdisc. This causes the ingress qdisc\n     created in step 1 to be removed, thus freeing the previously linked\n     tcx_entry:\n\n     rtnetlink_rcv_msg()\n       => tc_modify_qdisc()\n         => qdisc_create()\n           => clsact_init() [a]\n         => qdisc_graft()\n           => qdisc_destroy()\n             => __qdisc_destroy()\n               => ingress_destroy() [b]\n                 => tcx_entry_free()\n                   => kfree_rcu() // tcx_entry freed\n\n  5. Finally, the network namespace is closed. This registers the\n     cleanup_net worker, and during the process of releasing the\n     remaining clsact qdisc, it accesses the tcx_entry that was\n     already freed in step 4, causing the UAF to occur:\n\n     cleanup_net()\n       => ops_exit_list()\n         => default_device_exit_batch()\n           => unregister_netdevice_many()\n             => unregister_netdevice_many_notify()\n               => dev_shutdown()\n                 => qdisc_put()\n                   => clsact_destroy() [c]\n                     => tcf_block_put_ext()\n                       => tcf_chain0_head_change_cb_del()\n                         => tcf_chain_head_change_item()\n                           => clsact_chain_head_change()\n                             => mini_qdisc_pair_swap() // UAF\n\nThere are also other variants, the gist is to add an ingress (or clsact)\nqdisc with a specific shared block, then to replace that qdisc, waiting\nfor the tcx_entry kfree_rcu() to be executed and subsequently accessing\nthe current active qdisc's miniq one way or another.\n\nThe correct fix is to turn the miniq_active boolean into a counter. What\ncan be observed, at step 2 above, the counter transitions from 0->1, at\nstep [a] from 1->2 (in order for the miniq object to remain active during\nthe replacement), then in [b] from 2->1 and finally [c] 1->0 with the\neventual release. The reference counter in general ranges from [0,2] and\nit does not need to be atomic since all access to the counter is protected\nby the rtnl mutex. With this in place, there is no longer a UAF happening\nand the tcx_entry is freed at the correct time.",
    "cvss3": {
        "cvss": 5.5,
        "exploitability_score": 1.8,
        "impact_score": 3.6,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
    },
    "cvss2": null,
    "cpes": [
        {
            "id": 1162660
        },
        {
            "id": 1162661
        },
        {
            "id": 1162662
        },
        {
            "id": 1162663
        },
        {
            "id": 1170827
        },
        {
            "id": 1170828
        },
        {
            "id": 1217932
        },
        {
            "id": 1217933
        },
        {
            "id": 1217934
        },
        {
            "id": 1217935
        },
        {
            "id": 1217936
        },
        {
            "id": 1217937
        },
        {
            "id": 1217938
        },
        {
            "id": 1217942
        },
        {
            "id": 1217943
        },
        {
            "id": 1217944
        },
        {
            "id": 1217945
        },
        {
            "id": 1217946
        },
        {
            "id": 1217947
        },
        {
            "id": 1226807
        },
        {
            "id": 1226808
        },
        {
            "id": 1248979
        },
        {
            "id": 1248980
        },
        {
            "id": 1248981
        },
        {
            "id": 1248982
        },
        {
            "id": 1248983
        },
        {
            "id": 1248984
        },
        {
            "id": 1248985
        },
        {
            "id": 1248986
        },
        {
            "id": 1248987
        },
        {
            "id": 1248988
        },
        {
            "id": 1248989
        },
        {
            "id": 1248990
        },
        {
            "id": 1262084
        },
        {
            "id": 1262085
        },
        {
            "id": 1262086
        },
        {
            "id": 1262087
        },
        {
            "id": 1262088
        },
        {
            "id": 1262089
        },
        {
            "id": 1262090
        },
        {
            "id": 1262091
        },
        {
            "id": 1266367
        },
        {
            "id": 1266368
        },
        {
            "id": 1266369
        },
        {
            "id": 1266382
        },
        {
            "id": 1266383
        },
        {
            "id": 1266384
        },
        {
            "id": 1266385
        },
        {
            "id": 1266386
        },
        {
            "id": 1266387
        },
        {
            "id": 1266388
        },
        {
            "id": 1266389
        },
        {
            "id": 1266390
        },
        {
            "id": 1266391
        },
        {
            "id": 1266392
        },
        {
            "id": 1270626
        },
        {
            "id": 1270627
        },
        {
            "id": 1270628
        },
        {
            "id": 1270629
        },
        {
            "id": 1270630
        },
        {
            "id": 1270631
        },
        {
            "id": 1270632
        }
    ]
}