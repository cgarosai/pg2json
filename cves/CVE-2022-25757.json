{
    "id": 183168,
    "name": "CVE-2022-25757",
    "cwe": "CWE-20",
    "modified": "2022-04-04T15:22:20",
    "published": "2022-03-28T05:15:06",
    "status": "Analyzed",
    "summary": "In Apache APISIX before 2.13.0, when decoding JSON with duplicate keys, lua-cjson will choose the last occurred value as the result. By passing a JSON with a duplicate key, the attacker can bypass the body_schema validation in the request-validation plugin. For example, `{\"string_payload\":\"bad\",\"string_payload\":\"good\"}` can be used to hide the \"bad\" input. Systems satisfy three conditions below are affected by this attack: 1. use body_schema validation in the request-validation plugin 2. upstream application uses a special JSON library that chooses the first occurred value, like jsoniter or gojay 3. upstream application does not validate the input anymore. The fix in APISIX is to re-encode the validated JSON input back into the request body at the side of APISIX. Improper Input Validation vulnerability in __COMPONENT__ of Apache APISIX allows an attacker to __IMPACT__. This issue affects Apache APISIX Apache APISIX version 2.12.1 and prior versions.",
    "cvss3": {
        "cvss": 9.8,
        "exploitability_score": 3.9,
        "impact_score": 5.9,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
    },
    "cvss2": {
        "exploitability_score": 8.6,
        "impact_score": 6.4,
        "cvss": 6.8,
        "vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P"
    },
    "cpes": [
        {
            "id": 622896
        },
        {
            "id": 622897
        },
        {
            "id": 622898
        },
        {
            "id": 622899
        },
        {
            "id": 738069
        },
        {
            "id": 738070
        },
        {
            "id": 738071
        },
        {
            "id": 738072
        },
        {
            "id": 738073
        },
        {
            "id": 738074
        },
        {
            "id": 738075
        },
        {
            "id": 738076
        },
        {
            "id": 738077
        },
        {
            "id": 738078
        },
        {
            "id": 738079
        },
        {
            "id": 738080
        },
        {
            "id": 738081
        },
        {
            "id": 738082
        },
        {
            "id": 738083
        },
        {
            "id": 738084
        },
        {
            "id": 738085
        },
        {
            "id": 738086
        },
        {
            "id": 738087
        },
        {
            "id": 738088
        },
        {
            "id": 738089
        },
        {
            "id": 818354
        },
        {
            "id": 818355
        },
        {
            "id": 818356
        },
        {
            "id": 818357
        },
        {
            "id": 818358
        },
        {
            "id": 818359
        },
        {
            "id": 842318
        },
        {
            "id": 842319
        },
        {
            "id": 842320
        },
        {
            "id": 842321
        },
        {
            "id": 842322
        }
    ]
}