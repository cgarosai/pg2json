{
    "id": 217960,
    "name": "CVE-2023-34459",
    "cwe": "CWE-354",
    "modified": "2023-06-26T16:50:28",
    "published": "2023-06-16T21:15:08",
    "status": "Analyzed",
    "summary": "OpenZeppelin Contracts is a library for smart contract development. Starting in version 4.7.0 and prior to version 4.9.2, when the `verifyMultiProof`, `verifyMultiProofCalldata`, `procesprocessMultiProof`, or `processMultiProofCalldat` functions are in use, it is possible to construct merkle trees that allow forging a valid multiproof for an arbitrary set of leaves.\n\nA contract may be vulnerable if it uses multiproofs for verification and the merkle tree that is processed includes a node with value 0 at depth 1 (just under the root). This could happen inadvertedly for balanced trees with 3 leaves or less, if the leaves are not hashed. This could happen deliberately if a malicious tree builder includes such a node in the tree.\n\nA contract is not vulnerable if it uses single-leaf proving (`verify`, `verifyCalldata`, `processProof`, or `processProofCalldata`), or if it uses multiproofs with a known tree that has hashed leaves. Standard merkle trees produced or validated with the @openzeppelin/merkle-tree library are safe.\n\nThe problem has been patched in version 4.9.2.\n\nSome workarounds are available. For those using multiproofs: When constructing merkle trees hash the leaves and do not insert empty nodes in your trees. Using the @openzeppelin/merkle-tree package eliminates this issue. Do not accept user-provided merkle roots without reconstructing at least the first level of the tree. Verify the merkle tree structure by reconstructing it from the leaves.",
    "cvss3": {
        "cvss": 5.9,
        "exploitability_score": 2.2,
        "impact_score": 3.6,
        "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N"
    },
    "cvss2": null,
    "cpes": [
        {
            "id": 911170
        },
        {
            "id": 914014
        },
        {
            "id": 918195
        },
        {
            "id": 918200
        },
        {
            "id": 986608
        },
        {
            "id": 986609
        },
        {
            "id": 986610
        },
        {
            "id": 986611
        },
        {
            "id": 986612
        },
        {
            "id": 986613
        },
        {
            "id": 986614
        },
        {
            "id": 986619
        },
        {
            "id": 986620
        },
        {
            "id": 1040746
        },
        {
            "id": 1040747
        },
        {
            "id": 1040748
        },
        {
            "id": 1040749
        },
        {
            "id": 1040750
        },
        {
            "id": 1040751
        },
        {
            "id": 1040752
        },
        {
            "id": 1040753
        },
        {
            "id": 1063560
        },
        {
            "id": 1063561
        },
        {
            "id": 1108410
        },
        {
            "id": 1108411
        },
        {
            "id": 1108412
        },
        {
            "id": 1108413
        },
        {
            "id": 1108415
        },
        {
            "id": 1108416
        },
        {
            "id": 1108417
        },
        {
            "id": 1108418
        }
    ]
}