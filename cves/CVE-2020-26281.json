{
    "id": 154760,
    "name": "CVE-2020-26281",
    "cwe": "CWE-444",
    "modified": "2021-02-16T16:16:16",
    "published": "2020-12-21T21:15:13",
    "status": "Analyzed",
    "summary": "async-h1 is an asynchronous HTTP/1.1 parser for Rust (crates.io). There is a request smuggling vulnerability in async-h1 before version 2.3.0. This vulnerability affects any webserver that uses async-h1 behind a reverse proxy, including all such Tide applications. If the server does not read the body of a request which is longer than some buffer length, async-h1 will attempt to read a subsequent request from the body content starting at that offset into the body. One way to exploit this vulnerability would be for an adversary to craft a request such that the body contains a request that would not be noticed by a reverse proxy, allowing it to forge forwarded/x-forwarded headers. If an application trusted the authenticity of these headers, it could be misled by the smuggled request. Another potential concern with this vulnerability is that if a reverse proxy is sending multiple http clients' requests along the same keep-alive connection, it would be possible for the smuggled request to specify a long content and capture another user's request in its body. This content could be captured in a post request to an endpoint that allows the content to be subsequently retrieved by the adversary. This has been addressed in async-h1 2.3.0 and previous versions have been yanked.",
    "cvss3": {
        "cvss": 7.5,
        "exploitability_score": 2.2,
        "impact_score": 4.7,
        "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:H/A:N"
    },
    "cvss2": {
        "exploitability_score": 8.6,
        "impact_score": 4.9,
        "cvss": 5.8,
        "vector": "AV:N/AC:M/Au:N/C:P/I:P/A:N"
    },
    "cpes": [
        {
            "id": 659755
        },
        {
            "id": 659756
        },
        {
            "id": 659757
        },
        {
            "id": 659758
        },
        {
            "id": 659759
        },
        {
            "id": 659760
        },
        {
            "id": 659761
        },
        {
            "id": 659762
        },
        {
            "id": 659763
        },
        {
            "id": 659764
        },
        {
            "id": 659765
        },
        {
            "id": 659766
        },
        {
            "id": 659767
        },
        {
            "id": 659768
        },
        {
            "id": 659769
        },
        {
            "id": 659770
        },
        {
            "id": 659771
        },
        {
            "id": 659772
        }
    ]
}