{
    "id": 183863,
    "name": "CVE-2022-24795",
    "cwe": "CWE-190",
    "modified": "2023-11-07T02:44:37",
    "published": "2022-04-05T14:15:14",
    "status": "Modified",
    "summary": "yajl-ruby is a C binding to the YAJL JSON parsing and generation library. The 1.x branch and the 2.x branch of `yajl` contain an integer overflow which leads to subsequent heap memory corruption when dealing with large (~2GB) inputs. The reallocation logic at `yajl_buf.c#L64` may result in the `need` 32bit integer wrapping to 0 when `need` approaches a value of 0x80000000 (i.e. ~2GB of data), which results in a reallocation of buf->alloc into a small heap chunk. These integers are declared as `size_t` in the 2.x branch of `yajl`, which practically prevents the issue from triggering on 64bit platforms, however this does not preclude this issue triggering on 32bit builds on which `size_t` is a 32bit integer. Subsequent population of this under-allocated heap chunk is based on the original buffer size, leading to heap memory corruption. This vulnerability mostly impacts process availability. Maintainers believe exploitation for arbitrary code execution is unlikely. A patch is available and anticipated to be part of yajl-ruby version 1.4.2. As a workaround, avoid passing large inputs to YAJL.",
    "cvss3": {
        "cvss": 7.5,
        "exploitability_score": 3.9,
        "impact_score": 3.6,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
    },
    "cvss2": {
        "exploitability_score": 10.0,
        "impact_score": 2.9,
        "cvss": 5.0,
        "vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N"
    },
    "cpes": [
        {
            "id": 503674
        },
        {
            "id": 503675
        },
        {
            "id": 503676
        },
        {
            "id": 503677
        },
        {
            "id": 503678
        },
        {
            "id": 503679
        },
        {
            "id": 503680
        },
        {
            "id": 503681
        },
        {
            "id": 503682
        },
        {
            "id": 503683
        },
        {
            "id": 503684
        },
        {
            "id": 503685
        },
        {
            "id": 503686
        },
        {
            "id": 503687
        },
        {
            "id": 503688
        },
        {
            "id": 503689
        },
        {
            "id": 503690
        },
        {
            "id": 503691
        },
        {
            "id": 503692
        },
        {
            "id": 503693
        },
        {
            "id": 503694
        },
        {
            "id": 503695
        },
        {
            "id": 503696
        },
        {
            "id": 503697
        },
        {
            "id": 503698
        },
        {
            "id": 503699
        },
        {
            "id": 503700
        },
        {
            "id": 503701
        },
        {
            "id": 503702
        },
        {
            "id": 503703
        },
        {
            "id": 503704
        },
        {
            "id": 503705
        },
        {
            "id": 503706
        },
        {
            "id": 503707
        },
        {
            "id": 503708
        },
        {
            "id": 503709
        },
        {
            "id": 503710
        },
        {
            "id": 503711
        },
        {
            "id": 503712
        },
        {
            "id": 503713
        },
        {
            "id": 503714
        },
        {
            "id": 503715
        },
        {
            "id": 503716
        },
        {
            "id": 503717
        },
        {
            "id": 503718
        },
        {
            "id": 503719
        },
        {
            "id": 503720
        },
        {
            "id": 503721
        },
        {
            "id": 503722
        },
        {
            "id": 503723
        },
        {
            "id": 503724
        },
        {
            "id": 503725
        },
        {
            "id": 503726
        },
        {
            "id": 503727
        },
        {
            "id": 503728
        },
        {
            "id": 503729
        },
        {
            "id": 503730
        },
        {
            "id": 503731
        },
        {
            "id": 503732
        },
        {
            "id": 503733
        },
        {
            "id": 503734
        },
        {
            "id": 503735
        },
        {
            "id": 503736
        },
        {
            "id": 503737
        },
        {
            "id": 503738
        }
    ]
}