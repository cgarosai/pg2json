{
    "id": 225683,
    "name": "CVE-2023-41325",
    "cwe": "CWE-415",
    "modified": "2023-09-22T17:07:17",
    "published": "2023-09-15T18:15:10",
    "status": "Analyzed",
    "summary": "OP-TEE is a Trusted Execution Environment (TEE) designed as companion to a non-secure Linux kernel running on Arm; Cortex-A cores using the TrustZone technology. Starting in version 3.20 and prior to version 3.22, `shdr_verify_signature` can make a double free. `shdr_verify_signature` used to verify a TA binary before it is loaded. To verify a signature of it, allocate a memory for RSA key. RSA key allocate function (`sw_crypto_acipher_alloc_rsa_public_key`) will try to allocate a memory (which is optee\u2019s heap memory). RSA key is consist of exponent and modulus (represent as variable `e`, `n`) and it allocation is not atomic way, so it may succeed in `e` but fail in `n`. In this case sw_crypto_acipher_alloc_rsa_public_key` will free on `e` and return as it is failed but variable \u2018e\u2019 is remained as already freed memory address . `shdr_verify_signature` will free again that memory (which is `e`) even it is freed when it failed allocate RSA key. A patch is available in version 3.22. No known workarounds are available.",
    "cvss3": {
        "cvss": 6.7,
        "exploitability_score": 0.8,
        "impact_score": 5.9,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H"
    },
    "cvss2": null,
    "cpes": [
        {
            "id": 1151204
        },
        {
            "id": 1151205
        },
        {
            "id": 1151206
        },
        {
            "id": 1151208
        },
        {
            "id": 1151209
        }
    ]
}