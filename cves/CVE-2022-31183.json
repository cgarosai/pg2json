{
    "id": 192221,
    "name": "CVE-2022-31183",
    "cwe": "CWE-295",
    "modified": "2022-08-09T17:38:00",
    "published": "2022-08-01T18:15:08",
    "status": "Analyzed",
    "summary": "fs2 is a compositional, streaming I/O library for Scala. When establishing a server-mode `TLSSocket` using `fs2-io` on Node.js, the parameter `requestCert = true` is ignored, peer certificate verification is skipped, and the connection proceeds. The vulnerability is limited to: 1. `fs2-io` running on Node.js. The JVM TLS implementation is completely independent. 2. `TLSSocket`s in server-mode. Client-mode `TLSSocket`s are implemented via a different API. 3. mTLS as enabled via `requestCert = true` in `TLSParameters`. The default setting is `false` for server-mode `TLSSocket`s. It was introduced with the initial Node.js implementation of fs2-io in 3.1.0. A patch is released in v3.2.11. The requestCert = true parameter is respected and the peer certificate is verified. If verification fails, a SSLException is raised. If using an unpatched version on Node.js, do not use a server-mode TLSSocket with requestCert = true to establish a mTLS connection.",
    "cvss3": {
        "cvss": 9.8,
        "exploitability_score": 3.9,
        "impact_score": 5.9,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
    },
    "cvss2": null,
    "cpes": [
        {
            "id": 1047016
        },
        {
            "id": 1047017
        },
        {
            "id": 1047018
        },
        {
            "id": 1047019
        },
        {
            "id": 1047020
        },
        {
            "id": 1047021
        },
        {
            "id": 1047022
        },
        {
            "id": 1047023
        },
        {
            "id": 1047024
        },
        {
            "id": 1047025
        },
        {
            "id": 1047026
        },
        {
            "id": 1047027
        },
        {
            "id": 1047028
        },
        {
            "id": 1047029
        },
        {
            "id": 1047030
        },
        {
            "id": 1047031
        },
        {
            "id": 1047032
        },
        {
            "id": 1047033
        }
    ]
}