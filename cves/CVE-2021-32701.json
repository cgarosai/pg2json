{
    "id": 165272,
    "name": "CVE-2021-32701",
    "cwe": "CWE-863",
    "modified": "2021-06-29T23:10:33",
    "published": "2021-06-22T18:15:08",
    "status": "Analyzed",
    "summary": "ORY Oathkeeper is an Identity & Access Proxy (IAP) and Access Control Decision API that authorizes HTTP requests based on sets of Access Rules. When you make a request to an endpoint that requires the scope `foo` using an access token granted with that `foo` scope, introspection will be valid and that token will be cached. The problem comes when a second requests to an endpoint that requires the scope `bar` is made before the cache has expired. Whether the token is granted or not to the `bar` scope, introspection will be valid. A patch will be released with `v0.38.12-beta.1`. Per default, caching is disabled for the `oauth2_introspection` authenticator. When caching is disabled, this vulnerability does not exist. The cache is checked in [`func (a *AuthenticatorOAuth2Introspection) Authenticate(...)`](https://github.com/ory/oathkeeper/blob/6a31df1c3779425e05db1c2a381166b087cb29a4/pipeline/authn/authenticator_oauth2_introspection.go#L152). From [`tokenFromCache()`](https://github.com/ory/oathkeeper/blob/6a31df1c3779425e05db1c2a381166b087cb29a4/pipeline/authn/authenticator_oauth2_introspection.go#L97) it seems that it only validates the token expiration date, but ignores whether the token has or not the proper scopes. The vulnerability was introduced in PR #424. During review, we failed to require appropriate test coverage by the submitter which is the primary reason that the vulnerability passed the review process.",
    "cvss3": {
        "cvss": 7.5,
        "exploitability_score": 3.9,
        "impact_score": 3.6,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N"
    },
    "cvss2": {
        "exploitability_score": 8.6,
        "impact_score": 2.9,
        "cvss": 4.3,
        "vector": "AV:N/AC:M/Au:N/C:P/I:N/A:N"
    },
    "cpes": [
        {
            "id": 723363
        },
        {
            "id": 723364
        },
        {
            "id": 723365
        },
        {
            "id": 723366
        },
        {
            "id": 723367
        },
        {
            "id": 723368
        },
        {
            "id": 723369
        },
        {
            "id": 723370
        },
        {
            "id": 723371
        },
        {
            "id": 723372
        },
        {
            "id": 723373
        },
        {
            "id": 723374
        }
    ]
}